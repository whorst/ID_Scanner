import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class BinaryTree {

	Node root;
	Node newNode;

	
	
	public void insertNode(Node node) {
		Node currentNode = root;
		boolean inserted = false;
		
		while (!inserted) {
			if (currentNode.name.compareTo(node.name) > 0) {
				if (currentNode.leftChild == null) {
					currentNode.leftChild = node;
					inserted = !inserted;
				} else {
					currentNode = currentNode.leftChild;
				}
			}
			else {
				if (currentNode.rightChild == null) {
				 	currentNode.rightChild = node;
				 	inserted = !inserted;
				} else {
					currentNode = currentNode.rightChild;
				}
			}
			
		}
	}

	public void addNode(String name, String lastName, String birthday) {

		newNode = new Node(name, lastName, birthday);

		Node focusNode = root;

		Node parent;
		while (true) {

			parent = focusNode;

			if (lastName.compareTo(focusNode.lastName) <= 1) {
				focusNode = focusNode.leftChild;

				if (focusNode == null) {

					parent.leftChild = newNode;

					return;

				}

			} else {

				if (lastName.compareTo(focusNode.lastName) >= 1) {

					focusNode = focusNode.rightChild;

					if (focusNode == null) {

						parent.rightChild = newNode;
						return;
					} else {
						if (lastName.compareTo(focusNode.lastName) >= 1) {
							parent = focusNode;
							focusNode = focusNode.rightChild;

							if (focusNode == null) {

								parent.rightChild = newNode;
								return;
							}
						} else {
							parent = focusNode;
							focusNode = focusNode.leftChild;

							if (focusNode == null) {

								parent.leftChild = newNode;

								return;

							}
						}
					}
				}
			}
		}
	}


	/**
	 * Printing the contents of the tree in a Postorder way.
	 */
	public void printPostorder() {
		printPostOrderRec(root);
		System.out.println("");

	}

	/**
	 * Helper method to recursively print the contents in a Postorder way
	 */
	private void printPostOrderRec(Node currRoot) {
		if (currRoot == null) {
			return;
		}
		printPostOrderRec(currRoot.leftChild);
		System.out.print(currRoot +  "\n" + "\n");
		printPostOrderRec(currRoot.rightChild);

	}

	public boolean search(String value) {
		if (root == null) {
			return false;
		} else {
			return root.searchNode(value);

		}
	}

}
