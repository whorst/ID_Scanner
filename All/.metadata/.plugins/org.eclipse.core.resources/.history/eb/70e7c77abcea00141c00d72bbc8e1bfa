import java.util.ArrayList;

public class Search {

	public Search(ArrayList<Integer> bin, int key) {

		int counter = 0;
		int lowVal = 0;
		int highVal = bin.size();

		while (lowVal <= highVal) {
			counter++;
			int midVal = (lowVal + highVal) / 2;

			if (bin.get(midVal) < key)
				lowVal = midVal + 1;
			else if (bin.get(midVal) == key) {
				System.out.println(key + " found at location " + (midVal + 1)
						+ ".");
				System.out.println("Number of comparisons = " + counter);
				return;

			} else
				highVal = midVal - 1;
		}
		if (lowVal > highVal)
			System.out.println(key + " is not present in the list.\n");

		System.out.println("Number of comparisons = " + counter);

		return;
	}

	public Search(ArrayList<Integer> binarySearch, int i, int j, int k) {
		// TODO Auto-generated constructor stub
	}

	public int binsearch(ArrayList<Integer> bin, int highVal, int lowVal, int key) {
		int position;
		boolean found = true;
		int mid = (highVal + lowVal) / 2;
		if (bin.get(mid).compareTo(key) == 0) {

			found = true;
			position = mid;

		} else {

			if (bin.get(mid).compareTo(key) > 1) {
				highVal = mid - 1;
				position = binsearch(bin, highVal, lowVal, key);
			} else {
				lowVal = mid - 1;
				position = position = binsearch(bin, highVal, lowVal, key);

			}

		}

		return (position);
	}
}
