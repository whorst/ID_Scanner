import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class BinaryTree {

	Node root;
	Node newNode;

	public BinaryTree() {
		root = null;
	}

	public BinaryTree(Node n) {
		root = n;
	}

	public void insertNode(Node node) throws FileNotFoundException {

		PrintWriter output = new PrintWriter("newFile.txt");

		Node currentNode = root;
		boolean inserted = false;

		if (root == null) {
			root = node;
			inserted = !inserted;
		}

		while (!inserted) {
			if (currentNode.name.compareTo(node.name) > 0) {
				if (currentNode.leftChild == null) { // /If there's an empty
														// space, the node will
														// go there
					currentNode.leftChild = node;
					inserted = !inserted;
				} else {
					currentNode = currentNode.leftChild; // else it's not empty,
															// the node will go
															// to
				} // the left of the left child and run search again
			} else {
				if (currentNode.rightChild == null) {
					currentNode.rightChild = node;
					inserted = !inserted;
				} else {
					currentNode = currentNode.rightChild;
				}
			}
			write(node, output);
		}
	output.close();	
	}

	public static void write(Node node, PrintWriter newFile) {
		while(true) {
			// print out all values of array 3 to events1.txt
			newFile.println(node);
		}

	}

	/**
	 * Printing the contents of the tree in a Postorder way.
	 * 
	 * @throws FileNotFoundException
	 */
	public void printPostorder() throws IOException {

		printPostOrderRec(root);
		System.out.println("");

	}

	/**
	 * Helper method to recursively print the contents in a Postorder way
	 * 
	 * @throws FileNotFoundException
	 */
	private void printPostOrderRec(Node currRoot) throws FileNotFoundException {

		if (currRoot == null) {
			return;
		}
		printPostOrderRec(currRoot.leftChild);
		System.out.print(currRoot + "\n" + "\n");
		printPostOrderRec(currRoot.rightChild);

	}

	public String search(String value) {
		if (root == null) {
			return "false";
		} else {
			int counter = 0;
			return root.searchNode(value, counter);

		}
	}

}
